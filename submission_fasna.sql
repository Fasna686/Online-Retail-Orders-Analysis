USE orders;
-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]


 #ANSWER   
SELECT CONCAT(CASE 
            WHEN CUSTOMER_GENDER = 'M' THEN 'MR'
            WHEN CUSTOMER_GENDER = 'F' THEN 'MS'
            ELSE '' END,' ',UPPER(CUSTOMER_FNAME),' ',UPPER(CUSTOMER_LNAME)) AS FULL_NAME,
    CUSTOMER_EMAIL,
   CUSTOMER_CREATION_DATE,
    CASE 
        WHEN EXTRACT(YEAR FROM CUSTOMER_CREATION_DATE) < 2005 THEN 'A'
        WHEN EXTRACT(YEAR FROM CUSTOMER_CREATION_DATE) >= 2005 AND EXTRACT(YEAR FROM CUSTOMER_CREATION_DATE) < 2011 THEN 'B'
        ELSE 'C'END AS CATEGORY  FROM ONLINE_CUSTOMER;

-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    

#ANSWER-
SELECT p.PRODUCT_ID,p.PRODUCT_DESC,p.PRODUCT_QUANTITY_AVAIL,p.PRODUCT_PRICE,
(p.PRODUCT_QUANTITY_AVAIL * p.PRODUCT_PRICE) AS INVENTORY_VALUE,
CASE
        WHEN p.PRODUCT_PRICE > 20000 THEN p.PRODUCT_PRICE * 0.8
        WHEN p.PRODUCT_PRICE > 10000 THEN p.PRODUCT_PRICE * 0.85
        ELSE p.PRODUCT_PRICE * 0.9
    END AS NEW_PRICE
FROM PRODUCT p LEFT JOIN ORDER_ITEMS oi ON p.PRODUCT_ID = oi.PRODUCT_ID
WHERE
    oi.PRODUCT_ID IS NULL
ORDER BY INVENTORY_VALUE DESC;


-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
#answer


SELECT pc.PRODUCT_CLASS_CODE,
       pc.PRODUCT_CLASS_DESC,
       COUNT(p.PRODUCT_DESC) AS PRODUCT_TYPE_COUNT,
       SUM(p.PRODUCT_QUANTITY_AVAIL * p.PRODUCT_PRICE) AS INVENTORY_VALUE
FROM PRODUCT p
JOIN PRODUCT_CLASS pc ON p.PRODUCT_CLASS_CODE = pc.PRODUCT_CLASS_CODE
GROUP BY pc.PRODUCT_CLASS_CODE, pc.PRODUCT_CLASS_DESC
HAVING SUM(p.PRODUCT_QUANTITY_AVAIL * p.PRODUCT_PRICE) > 100000
ORDER BY INVENTORY_VALUE DESC;


-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
#ANSWER

SELECT OC.CUSTOMER_ID,CONCAT(CUSTOMER_FNAME, ' ', CUSTOMER_LNAME) AS FULL_NAME,OC.CUSTOMER_EMAIL,OC.CUSTOMER_PHONE,A.COUNTRY
FROM ONLINE_CUSTOMER OC JOIN ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
WHERE OC.CUSTOMER_ID IN (SELECT OH.CUSTOMER_ID FROM ORDER_HEADER OH
WHERE OH.ORDER_STATUS = 'CANCELLED' GROUP BY OH.CUSTOMER_ID 
HAVING 
COUNT(*) = (SELECT COUNT(*) FROM ORDER_HEADER WHERE CUSTOMER_ID = OH.CUSTOMER_ID)
    );

-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
    
#ANSWER
SELECT 
    S.SHIPPER_NAME,
    A.CITY AS CATERING_CITY,
    COUNT(DISTINCT OC.CUSTOMER_ID) AS CUSTOMERS_CATERED,
    COUNT(DISTINCT OH.ORDER_ID) AS CONSIGNMENTS_DELIVERED
FROM SHIPPER S JOIN ORDER_HEADER OH ON S.SHIPPER_ID = OH.SHIPPER_ID
JOIN ONLINE_CUSTOMER OC ON OH.CUSTOMER_ID = OC.CUSTOMER_ID
JOIN ADDRESS A ON OC.ADDRESS_ID = A.ADDRESS_ID
WHERE S.SHIPPER_NAME = 'DHL'
GROUP BY 
    S.SHIPPER_NAME,
    A.CITY;

-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]

#ANSWER

select OC.CUSTOMER_ID,concat(OC.CUSTOMER_FNAME," ",OC.CUSTOMER_LNAME)AS FULL_NAME,SUM(OI.PRODUCT_QUANTITY)AS TOTAL_QUANTITY
,SUM(P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE)AS TOTAL_VALUE
FROM online_customer OC JOIN order_header OH USING (CUSTOMER_ID)
join order_items OI USING (ORDER_ID)
join product P USING (PRODUCT_ID)
WHERE OH.PAYMENT_MODE="CASH"AND OC.CUSTOMER_LNAME LIKE "G%"
group by CUSTOMER_ID;

-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
  
#ANSWER

SELECT  OI.ORDER_ID,(P.LEN*P.WIDTH*P.HEIGHT) AS PRODUCT_VOLUME FROM PRODUCT P JOIN ORDER_ITEMS OI USING (PRODUCT_ID)
WHERE (P.LEN*P.WIDTH*P.HEIGHT)<= (SELECT (C.LEN*C.WIDTH*C.HEIGHT) AS CARTON_VOLUMN FROM CARTON C WHERE CARTON_ID=10)
order by PRODUCT_VOLUME DESC limit 1;


-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)

# ANSWER

SELECT 
    P.PRODUCT_ID,
    P.PRODUCT_DESC,
    P.PRODUCT_QUANTITY_AVAIL,
    SUM(OI.PRODUCT_QUANTITY) AS QUANTITY_SOLD,
    CASE WHEN PC.PRODUCT_CLASS_DESC IN ('ELECTRONICS', 'COMPUTER') THEN
	CASE WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
		 WHEN P.PRODUCT_QUANTITY_AVAIL < 0.1 * SUM(OI.PRODUCT_QUANTITY) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
		 WHEN P.PRODUCT_QUANTITY_AVAIL < 0.5 * SUM(OI.PRODUCT_QUANTITY) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
		ELSE 'SUFFICIENT INVENTORY'
            END
        WHEN PC.PRODUCT_CLASS_DESC IN ('MOBILES', 'WATCHES') THEN
            CASE 
                WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
                WHEN P.PRODUCT_QUANTITY_AVAIL < 0.2 * SUM(OI.PRODUCT_QUANTITY) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
                WHEN P.PRODUCT_QUANTITY_AVAIL < 0.6 * SUM(OI.PRODUCT_QUANTITY) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
                ELSE 'SUFFICIENT INVENTORY'
            END
        ELSE
            CASE 
                WHEN SUM(OI.PRODUCT_QUANTITY) = 0 THEN 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY'
                WHEN P.PRODUCT_QUANTITY_AVAIL < 0.3 * SUM(OI.PRODUCT_QUANTITY) THEN 'LOW INVENTORY, NEED TO ADD INVENTORY'
                WHEN P.PRODUCT_QUANTITY_AVAIL < 0.7 * SUM(OI.PRODUCT_QUANTITY) THEN 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY'
                ELSE 'SUFFICIENT INVENTORY'
            END   END INVENTORY_STATUS FROM PRODUCT P JOIN PRODUCT_CLASS PC ON P.PRODUCT_CLASS_CODE = PC.PRODUCT_CLASS_CODE
LEFT JOIN ORDER_ITEMS OI ON P.PRODUCT_ID = OI.PRODUCT_ID
GROUP BY P.PRODUCT_ID, P.PRODUCT_DESC, P.PRODUCT_QUANTITY_AVAIL, PC.PRODUCT_CLASS_DESC;



-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    
#ANSWER

SELECT P.PRODUCT_ID,P.PRODUCT_DESC,sum(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
FROM PRODUCT P join order_items OI using(PRODUCT_ID)
JOIN ORDER_HEADER OH USING (ORDER_ID)
join ONLINE_CUSTOMER OC  USING (CUSTOMER_ID)
JOIN ADDRESS A USING (ADDRESS_ID)
WHERE OI.ORDER_ID IN(SELECT OI2.ORDER_ID FROM ORDER_ITEMS OI2 where OI2.PRODUCT_ID="201" AND OH.ORDER_STATUS="SHIPPED" AND
 A.CITY NOT IN ( "BANGALORE" , "NEW DELHI"))
group by P.PRODUCT_ID,PRODUCT_DESC
order by TOTAL_QUANTITY DESC;





-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVENAND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]
    
#ANSWER

SELECT OH.ORDER_ID,OC.CUSTOMER_ID,concat(CUSTOMER_FNAME," ",CUSTOMER_LNAME)AS FULL_NAME,sum(OI.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
FROM ORDER_HEADER OH JOIN ONLINE_CUSTOMER OC USING (CUSTOMER_ID)
JOIN ADDRESS A USING (ADDRESS_ID)
JOIN ORDER_ITEMS OI USING(ORDER_ID)
where
OI.ORDER_ID%2=0 and A.PINCODE NOT LIKE "5%"
group by OH.ORDER_ID,OC.CUSTOMER_ID;
